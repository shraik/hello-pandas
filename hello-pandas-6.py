"""
Общее описание задачи:
сгруппировать остатки по виду (ОНСС/МТР) на основании номера счета.
Проблема: в выгрузке остатков отсутствует номер счета.

Исходные файлы должны лежать в папке "примеры_данных".
Входящие данные:
 - "остатки". Выгрузка остатков из SAP.
    файл: "примеры_данных/6__04_30.04.2025.xlsx"
    Имя датафрейма: "df_sap"
 - "меппинг счетов". Таблица присвоения счетов при передаче в 1с.
    файл: "примеры_данных/6__меппинг счетов.xlsx"
    Имя датафрейма: "df_map"
 - "заявки". Выгрузка списка заявок.
    файл: "примеры_данных/6__Лист в ALVXXL01-заявочная.xlsx"
    Имя датафрейма: "df_zai"


Для привязывания номера счета к строке остатков сделаем следующие действия:
1. к остаткам добавим "Класс оценки" из заявок. добавляем по совпадению первичной заявки.
2. к остаткам с классом оценки добавим "Счет учета" из меппинга счетов по совпадению 2х полей
    "Класс оценки SAP R/3"  + "Вид деятельности"
3. группируем в сводный лист, выводим в файл.
"""

import pandas as pd
import os

# очистка консоли
os.system("cls" if os.name == "nt" else "clear")

# Для начала загрузим xlsx файлы в датафреймы.
df_sap = pd.read_excel(
    "примеры_данных/6__04_30.04.2025.xlsx",
    engine="calamine",
)
df_map = pd.read_excel(
    "примеры_данных/6__меппинг счетов.xlsx",
    engine="calamine",
)

df_zai = pd.read_excel(
    "примеры_данных/6__Лист в ALVXXL01-заявочная.xlsx",
    engine="calamine",
)

print("\n-----\n типы данных в df_sap для формирования первичной заявки")
print(df_sap[["НомЗаяв", "Позиция"]].dtypes)
print(df_sap[["НомЗаяв", "Позиция"]].head())

# преобразуем в int и сформируем первичную заявку
df_sap["НомЗаяв"] = df_sap["НомЗаяв"].fillna(0.0).astype("Int64")
df_sap["Позиция"] = df_sap["Позиция"].fillna(0.0).astype("Int64")
df_sap["Перв"] = (
    df_sap["НомЗаяв"].astype("str") + " / " + df_sap["Позиция"].astype("str")
)

print(
    "\n-----\n типы данных в df_sap после конвертации и сформированная первичная заявка"
)
print(df_sap[["НомЗаяв", "Позиция", "Перв"]].dtypes)
print(df_sap[["НомЗаяв", "Позиция", "Перв"]].head())

print("\n-----\n типы данных в df_zai")
print(df_zai[["Номер заяв", "Позиция за"]].dtypes)
print(df_zai[["Номер заяв", "Позиция за"]].head())

# сформируем номер первичной заявки в поле "Перв"
df_zai["Перв"] = (
    df_zai["Номер заяв"].astype("str") + " / " + df_zai["Позиция за"].astype("str")
)
print("\n-----\n типы данных в df_zai с добавлением первичной заявки")
print(df_zai[["Номер заяв", "Позиция за", "Перв"]].dtypes)
print(df_zai[["Номер заяв", "Позиция за", "Перв"]].head())

# добавить колонку "Класс оценки" к выгрузке остатков "df_sap" по совпадению первичной заявки

print("\n-----\n типы данных в df_map")
print(df_map.dtypes)
print(df_map.head())


df_sap = pd.merge(
    df_sap,
    df_zai[["Перв", "Класс оценки"]],
    how="left",
    left_on=["Перв"],
    right_on=["Перв"],
)

print("\n-----\n данные в df_sap с колонкой 'Класс оценки' ")
print(df_sap[["Перв", "Класс оценки", "Наименование вида деятельности"]].head())

print(
    "\n-----\n делаем слияние фреймов "
    "'df_sap' и 'df_map' по 2м колонками 'Класс оценки SAP R/3'  + 'Вид деятельности'"
)

df_sap = pd.merge(
    left=df_sap,
    right=df_map,
    how="left",
    left_on=["Класс оценки", "Наименование вида деятельности"],
    right_on=["Класс оценки SAP R/3", "Вид деятельности"],
)

print(
    "\n-----\n Результат объединения: df_sap[['Перв', 'Счет учета']], получаем остатки со счетом учета"
)
print(df_sap[["Перв", "Счет учета"]].head())


# подготовка колонки для группировки
# все пустые помечаем "непонятно"
df_sap["Счет учета"] = df_sap["Счет учета"].fillna("непонятно")
mask = df_sap["Счет учета"].str.match("непонятно")
df_sap.loc[mask, "Вид деят"] = "непонятно"

# если счет содержит 10 и не содержит 10.12 это МТР
mask = df_sap["Счет учета"].str.match("10") & ~df_sap["Счет учета"].str.match("10.12")
df_sap.loc[mask, "Вид деят"] = "МТР"

# всё что не содержит МТР или "непонятно" это ОНСС
mask = df_sap["Вид деят"].str.match("МТР") | df_sap["Вид деят"].str.match("непонятно")
df_sap.loc[~mask, "Вид деят"] = "ОНСС"

# свертка
table = pd.pivot_table(
    df_sap,
    index=["Наименование подразделения", "Вид деят"],
    values=["Стоимость"],
    aggfunc="sum",
)
table.reset_index(inplace=True)

# вывод в xlsx файл на 2 листа
ptfile = "вывод/6__итог_df_sap.xlsx"
gl_writer = pd.ExcelWriter(
    ptfile,
    mode="w",
    engine="xlsxwriter",
    date_format="dd/mm/yyyy",
    datetime_format="dd/mm/yyyy",
)

df_sap.to_excel(gl_writer, sheet_name="df_sap", index=False)
table.to_excel(gl_writer, sheet_name="table", index=False)
wsl = gl_writer.book.get_worksheet_by_name("table")
wsl.autofit()
gl_writer.close()
print(f"Итоговый файл сохранен по адресу: {ptfile}")
